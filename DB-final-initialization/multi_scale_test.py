#!/usr/bin/env python3
"""
Script de Pruebas de Rendimiento Multi-Escala
Proyecto: Fredys Food Database Performance Analysis

Este script ejecuta pruebas de rendimiento autom√°ticamente con diferentes escalas de datos:
- 1,000 registros (1K)
- 10,000 registros (10K) 
- 100,000 registros (100K)
- 1,000,000 registros (1M)

Genera reportes comparativos para analizar el comportamiento de los √≠ndices
en diferentes vol√∫menes de datos.
"""

import os
import sys
import subprocess
import time
import json
from datetime import datetime

class MultiScalePerformanceTester:
    def __init__(self):
        self.scales = [1000, 10000, 100000, 1000000]
        self.scale_names = ["1K", "10K", "100K", "1M"]
        self.results = {}
        
    def run_command(self, command, description):
        """Ejecutar comando del sistema con manejo de errores"""
        print(f"üîÑ {description}...")
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {description} completado")
                return True, result.stdout
            else:
                print(f"‚ùå Error en {description}: {result.stderr}")
                return False, result.stderr
        except Exception as e:
            print(f"‚ùå Excepci√≥n ejecutando {description}: {e}")
            return False, str(e)
    
    def clean_and_recreate_schema(self):
        """Limpiar y recrear el esquema de base de datos"""
        print("\nüóëÔ∏è  Limpiando esquema anterior...")
        success, _ = self.run_command("python run_schema.py", "Recreando esquema")
        return success
    
    def generate_data(self, scale):
        """Generar datos para la escala especificada"""
        scale_name = self.scale_names[self.scales.index(scale)]
        print(f"\nüìä Generando {scale:,} registros ({scale_name})...")
        
        success, output = self.run_command(f"python main.py {scale}", f"Generaci√≥n de datos {scale_name}")
        if success:
            print(f"‚úÖ {scale:,} registros generados exitosamente")
        return success
    
    def run_performance_test(self, scale):
        """Ejecutar test de rendimiento para la escala actual"""
        scale_name = self.scale_names[self.scales.index(scale)]
        print(f"\nüöÄ Ejecutando pruebas de rendimiento para {scale_name} ({scale:,} registros)...")
        
        success, output = self.run_command("python measure_performance.py", f"Pruebas de rendimiento {scale_name}")
        
        if success:
            # Leer resultados del archivo JSON generado
            try:
                json_file = f"performance_results_{scale_name}.json"
                if os.path.exists(json_file):
                    with open(json_file, 'r', encoding='utf-8') as f:
                        self.results[scale_name] = json.load(f)
                    print(f"‚úÖ Resultados {scale_name} guardados")
                    return True
                else:
                    print(f"‚ö†Ô∏è  Archivo de resultados {json_file} no encontrado")
                    return False
            except Exception as e:
                print(f"‚ùå Error leyendo resultados {scale_name}: {e}")
                return False
        return False
    
    def estimate_time(self, scale):
        """Estimar tiempo necesario para una escala"""
        if scale <= 1000:
            return "2-3 minutos"
        elif scale <= 10000:
            return "5-8 minutos"
        elif scale <= 100000:
            return "15-25 minutos"
        else:
            return "45-90 minutos"
    
    def run_full_multi_scale_test(self):
        """Ejecutar test completo multi-escala"""
        print("üéØ SCRIPT DE PRUEBAS MULTI-ESCALA - Fredys Food Database")
        print("üî¨ An√°lisis de rendimiento en diferentes vol√∫menes de datos")
        print("=" * 70)
        
        total_estimated_time = "2-3 horas"
        print(f"‚è±Ô∏è  Tiempo estimado total: {total_estimated_time}")
        print("üìä Escalas a probar: 1K, 10K, 100K, 1M registros")
        
        # Confirmaci√≥n del usuario
        response = input("\n¬øDesea continuar con todas las escalas? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå Pruebas canceladas por el usuario")
            return
        
        start_time = datetime.now()
        successful_tests = 0
        
        for i, scale in enumerate(self.scales):
            scale_name = self.scale_names[i]
            estimated_time = self.estimate_time(scale)
            
            print(f"\n" + "="*70)
            print(f"üìä ESCALA {i+1}/4: {scale_name} ({scale:,} registros)")
            print(f"‚è±Ô∏è  Tiempo estimado: {estimated_time}")
            print("="*70)
            
            # Paso 1: Limpiar y recrear esquema
            if not self.clean_and_recreate_schema():
                print(f"‚ùå Error recreando esquema para {scale_name}")
                continue
            
            # Paso 2: Generar datos
            if not self.generate_data(scale):
                print(f"‚ùå Error generando datos para {scale_name}")
                continue
            
            # Paso 3: Ejecutar pruebas de rendimiento
            if not self.run_performance_test(scale):
                print(f"‚ùå Error en pruebas de rendimiento para {scale_name}")
                continue
            
            successful_tests += 1
            print(f"üéâ Escala {scale_name} completada exitosamente!")
            
            # Mostrar progreso
            elapsed = datetime.now() - start_time
            print(f"‚è±Ô∏è  Tiempo transcurrido: {elapsed}")
            
            if i < len(self.scales) - 1:
                print(f"üìä Progreso: {i+1}/{len(self.scales)} escalas completadas")
                time.sleep(2)  # Pausa breve entre escalas
        
        # Resumen final
        end_time = datetime.now()
        total_time = end_time - start_time
        
        print(f"\n" + "="*70)
        print("üéâ PRUEBAS MULTI-ESCALA COMPLETADAS")
        print("="*70)
        print(f"‚úÖ Escalas exitosas: {successful_tests}/{len(self.scales)}")
        print(f"‚è±Ô∏è  Tiempo total: {total_time}")
        
        if successful_tests > 0:
            self.generate_comparative_report()
    
    def generate_comparative_report(self):
        """Generar reporte comparativo de todas las escalas"""
        print("\nüìä Generando reporte comparativo...")
        
        if not self.results:
            print("‚ùå No hay resultados para generar reporte")
            return
        
        # Generar archivo de resumen
        summary = {
            'timestamp': datetime.now().isoformat(),
            'scales_tested': list(self.results.keys()),
            'summary': {},
            'detailed_results': self.results
        }
        
        # Calcular resumen por consulta
        for scale_name, scale_data in self.results.items():
            if 'without_indexes' in scale_data and 'with_indexes' in scale_data:
                summary['summary'][scale_name] = {}
                
                for query_id in scale_data['without_indexes'].keys():
                    if query_id in scale_data['with_indexes']:
                        time_without = scale_data['without_indexes'][query_id]['average']
                        time_with = scale_data['with_indexes'][query_id]['average']
                        
                        if time_without > 0:
                            improvement = ((time_without - time_with) / time_without) * 100
                            speedup = time_without / time_with if time_with > 0 else float('inf')
                            
                            summary['summary'][scale_name][query_id] = {
                                'time_without_ms': time_without,
                                'time_with_ms': time_with,
                                'improvement_percent': improvement,
                                'speedup_factor': speedup
                            }
        
        # Guardar resumen
        summary_file = f"multi_scale_summary_{datetime.now().strftime('%Y%m%d_%H%M')}.json"
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump(summary, f, indent=2, ensure_ascii=False)
        
        # Generar reporte LaTeX comparativo
        self.generate_comparative_latex()
        
        print(f"‚úÖ Reporte comparativo guardado en: {summary_file}")
        print("üìÅ Archivos generados:")
        print(f"  ‚Ä¢ {summary_file} - Resumen completo")
        print("  ‚Ä¢ multi_scale_comparative.tex - Tablas LaTeX comparativas")
        
        # Mostrar resumen en consola
        self.print_console_summary()
    
    def generate_comparative_latex(self):
        """Generar tablas LaTeX comparativas"""
        latex_content = f"""
% Reporte Comparativo Multi-Escala - {datetime.now().strftime('%Y-%m-%d %H:%M')}
% An√°lisis de rendimiento con y sin √≠ndices en diferentes vol√∫menes de datos

\\section{{Resultados Comparativos por Escala de Datos}}

% Tabla comparativa: Tiempos sin √≠ndices
\\begin{{table}}[h!]
\\centering
\\begin{{tabular}}{{|l|{'c|' * len(self.results)}}}
\\hline
\\textbf{{Consulta}} & {' & '.join([f'\\textbf{{{scale}}}' for scale in self.results.keys()])} \\\\
\\hline
"""
        
        # Agregar datos sin √≠ndices
        for i in range(1, 5):  # 4 consultas
            query_id = f"consulta_{i}"
            row = [f"Consulta {i}"]
            
            for scale_name in self.results.keys():
                if ('without_indexes' in self.results[scale_name] and 
                    query_id in self.results[scale_name]['without_indexes']):
                    time_ms = self.results[scale_name]['without_indexes'][query_id]['average']
                    row.append(f"{time_ms:.1f} ms")
                else:
                    row.append("N/A")
            
            latex_content += " & ".join(row) + " \\\\\n"
        
        latex_content += """\\hline
\\end{tabular}
\\caption{Tiempos de ejecuci√≥n SIN √≠ndices por escala de datos}
\\label{table:sin_indices_comparativo}
\\end{table}

% Tabla comparativa: Tiempos con √≠ndices
\\begin{table}[h!]
\\centering
\\begin{tabular}{|l|""" + 'c|' * len(self.results) + """}
\\hline
\\textbf{Consulta} & """ + ' & '.join([f'\\textbf{{{scale}}}' for scale in self.results.keys()]) + """ \\\\
\\hline
"""
        
        # Agregar datos con √≠ndices
        for i in range(1, 5):  # 4 consultas
            query_id = f"consulta_{i}"
            row = [f"Consulta {i}"]
            
            for scale_name in self.results.keys():
                if ('with_indexes' in self.results[scale_name] and 
                    query_id in self.results[scale_name]['with_indexes']):
                    time_ms = self.results[scale_name]['with_indexes'][query_id]['average']
                    row.append(f"{time_ms:.1f} ms")
                else:
                    row.append("N/A")
            
            latex_content += " & ".join(row) + " \\\\\n"
        
        latex_content += """\\hline
\\end{tabular}
\\caption{Tiempos de ejecuci√≥n CON √≠ndices por escala de datos}
\\label{table:con_indices_comparativo}
\\end{table}

% Tabla de mejoras de rendimiento
\\begin{table}[h!]
\\centering
\\begin{tabular}{|l|""" + 'c|' * len(self.results) + """}
\\hline
\\textbf{Consulta} & """ + ' & '.join([f'\\textbf{{{scale}}}' for scale in self.results.keys()]) + """ \\\\
\\hline
"""
        
        # Agregar porcentajes de mejora
        for i in range(1, 5):  # 4 consultas
            query_id = f"consulta_{i}"
            row = [f"Consulta {i}"]
            
            for scale_name in self.results.keys():
                if ('without_indexes' in self.results[scale_name] and 
                    'with_indexes' in self.results[scale_name] and
                    query_id in self.results[scale_name]['without_indexes'] and
                    query_id in self.results[scale_name]['with_indexes']):
                    
                    time_without = self.results[scale_name]['without_indexes'][query_id]['average']
                    time_with = self.results[scale_name]['with_indexes'][query_id]['average']
                    
                    if time_without > 0:
                        improvement = ((time_without - time_with) / time_without) * 100
                        row.append(f"{improvement:.1f}\\%")
                    else:
                        row.append("N/A")
                else:
                    row.append("N/A")
            
            latex_content += " & ".join(row) + " \\\\\n"
        
        latex_content += """\\hline
\\end{tabular}
\\caption{Porcentaje de mejora con √≠ndices por escala de datos}
\\label{table:mejoras_comparativo}
\\end{table}
"""
        
        # Guardar archivo LaTeX
        with open('multi_scale_comparative.tex', 'w', encoding='utf-8') as f:
            f.write(latex_content)
    
    def print_console_summary(self):
        """Mostrar resumen en consola"""
        print(f"\n" + "="*70)
        print("üìä RESUMEN COMPARATIVO DE RESULTADOS")
        print("="*70)
        
        for scale_name in self.results.keys():
            if 'total_records' in self.results[scale_name]:
                total_records = self.results[scale_name]['total_records']
                print(f"\nüìà {scale_name} ({total_records:,} registros totales):")
                
                if ('without_indexes' in self.results[scale_name] and 
                    'with_indexes' in self.results[scale_name]):
                    
                    for i, query_id in enumerate(['consulta_1', 'consulta_2', 'consulta_3', 'consulta_4'], 1):
                        if (query_id in self.results[scale_name]['without_indexes'] and
                            query_id in self.results[scale_name]['with_indexes']):
                            
                            time_without = self.results[scale_name]['without_indexes'][query_id]['average']
                            time_with = self.results[scale_name]['with_indexes'][query_id]['average']
                            improvement = ((time_without - time_with) / time_without) * 100
                            speedup = time_without / time_with if time_with > 0 else float('inf')
                            
                            print(f"  Consulta {i}: {time_without:.1f}ms ‚Üí {time_with:.1f}ms "
                                  f"({improvement:.1f}% mejora, {speedup:.1f}x)")


def main():
    """Funci√≥n principal"""
    print("üéØ SCRIPT DE PRUEBAS MULTI-ESCALA - Fredys Food Database")
    print("üî¨ An√°lisis completo de rendimiento en 4 escalas de datos")
    print("-" * 70)
    
    if len(sys.argv) > 1:
        if sys.argv[1] in ['-h', '--help']:
            print("""
Uso: python multi_scale_test.py [opciones]

Este script ejecuta autom√°ticamente pruebas de rendimiento en 4 escalas:
  ‚Ä¢ 1,000 registros (1K)
  ‚Ä¢ 10,000 registros (10K) 
  ‚Ä¢ 100,000 registros (100K)
  ‚Ä¢ 1,000,000 registros (1M)

Para cada escala:
  1. Recrea el esquema de base de datos
  2. Genera los datos correspondientes
  3. Ejecuta mediciones sin √≠ndices
  4. Crea √≠ndices optimizados
  5. Ejecuta mediciones con √≠ndices
  6. Genera reportes individuales

Al final:
  ‚Ä¢ Genera reporte comparativo multi-escala
  ‚Ä¢ Crea tablas LaTeX para el documento
  ‚Ä¢ Muestra an√°lisis de tendencias de rendimiento

Opciones:
  -h, --help     Mostrar esta ayuda

Requisitos:
  ‚Ä¢ PostgreSQL ejecut√°ndose (puerto 5433)
  ‚Ä¢ Usuario postgres con contrase√±a password123
  ‚Ä¢ Suficiente espacio en disco (~2GB para 1M registros)
  ‚Ä¢ Tiempo disponible (2-3 horas para todas las escalas)

ADVERTENCIA: Este proceso tomar√° varias horas y regenerar√° 
             todos los datos en cada escala.
            """)
            return
    
    tester = MultiScalePerformanceTester()
    
    try:
        tester.run_full_multi_scale_test()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Pruebas interrumpidas por el usuario")
        print("üìÅ Los resultados parciales se han guardado")
    except Exception as e:
        print(f"\n‚ùå Error durante la ejecuci√≥n: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
